pipeline {
    agent any
    environment{
        APPLICATION_GIT_REPO       = "https://github.com/sawasy/http_server.git"
        APPLICATION_GIT_BRANCH     = "main"
        INFRASTRUCTURE_GIT_REPO    = "https://github.com/abhpadhi/POC-webapp.git"
        GIT_BRANCH                 = "master"
        DOCKER_REGISTRY            = "abhpadhi/images"
        DOCKER_USER                = "abhpadhi"
    }
 
    stages{
        stage('pulling application code from git') {
            steps {
                script {
                    dir("$WORKSPACE") {
                        checkout scm: [$class: 'GitSCM', branches: [[name: "*/${APPLICATION_GIT_BRANCH}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'abhpadhi', url: "$APPLICATION_GIT_REPO"]]]
                    }      
                } 
            }
        }
        stage('pulling infra code from git') {
            steps {
                script {
                    dir("$WORKSPACE") {
                        checkout scm: [$class: 'GitSCM', branches: [[name: "*/${GIT_BRANCH}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'abhpadhi', url: "$INFRASTRUCTURE_GIT_REPO"]]]
                    }
                }   
            }
        }
        stage('Docker build') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'docker_pwd', variable: 'docker_password')]) {
                        dir("$WORKSPACE") {
                        sh '''
                            export IMAGE_TAG=${BUILD_NUMBER}
                            echo IMAGE_TAG=${IMAGE_TAG} > version.txt
                            export SERVICE_NAME="ruby-web-application"
                            docker login -u ${DOCKER_USER} -p $docker_password
                            docker build -t "${DOCKER_REGISTRY}:${SERVICE_NAME}-${IMAGE_TAG}" --file ./Dockerfile 
                            docker tag "${DOCKER_REGISTRY}:${SERVICE_NAME}-${IMAGE_TAG}" "${DOCKER_REGISTRY}:${SERVICE_NAME}:latest"
                            docker push "${DOCKER_REGISTRY}:${SERVICE_NAME}-${IMAGE_TAG}"
                        '''
                        }
                    }
                }
            }
        }
        stage('Minikube deployment') {
            steps {
                script {
                    withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
                    dir("$WORKSPACE") {
                    sh '''
                        # commenting namespace creation for now as its already present
                        #kubectl apply -f namespace.yaml
                        export IMAGE_TAG=$(awk -F "=" '{print $2}' version.txt)
                        export HELM_EXPERIMENTAL_OCI=1
                        export SERVICE_NAME="ruby-web-application"
                        export NAMESPACE="jenkins-minikube"
                        export docker_registry="abhpadhi/images"
                        helm upgrade --install --reuse-values --namespace ${NAMESPACE} ${SERVICE_NAME} ./Helm \
                            --set service_name=${SERVICE_NAME} \
                            --set replicas=2 \
                            --set docker_registry=${docker_registry} \
                            --set image_tag=${IMAGE_TAG}
                    '''
                    }
                }
              }
            }
        }
        stage('Post deployment smoke-test') {
            steps {
                script {
                    sh '''
                        curl -v http://$(minikube ip):30000
                    '''
                }
            }
        }
    }
}